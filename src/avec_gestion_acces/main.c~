#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <semaphore.h>
#include <errno.h> /* permet de récupérer les codes d’erreur */
#include "fonctions.h"
#define N 10

int main(int argc, char** argv)
{
  pthread_t thread_debit, thread_credit, thread_transfer;
  sem_t is_transactions_finish;
  //sem_init(&is_transactions_finish, 0, 0);
  int accounts_number = atoi(argv[1]);
  int operations_number = atoi(argv[2]);
  int transaction_amount = atoi(argv[3]);
  int account_choose, bank_balance_;
  account *accounts[accounts_number];
  int result, i;
  for(i = 0; i < accounts_number; i++)
  {
    accounts[i] = (account*)malloc(sizeof(account));
  }
  init_bank_accounts(accounts, accounts_number);
  bank_balance_ = bank_balance(accounts, accounts_number);
  
  printf("Le capitale de la banque avant les transactions : %d \n", bank_balance_);

  //pthread_mutex_lock(&mutex_main);
 
  
  for(i = 0; i < operations_number; i++)
  {
    int account_choose_debit = random_account_choose(accounts_number, accounts_number+1);
    account *account_for_debit = (account*)malloc(sizeof(account));
    account_for_debit = accounts[account_choose_debit];
    transaction_info *transaction_info_debit = (transaction_info*)malloc(sizeof(transaction_info));
    transaction_info_debit->source = account_for_debit;
    transaction_info_debit->transaction_amount = transaction_amount;
    result = pthread_create(&thread_debit, NULL, debit, (void*)transaction_info_debit);
    if(result != 0)
    {
      perror("Erreur dans la création du thread débiteur :");
    }
    pthread_join(thread_debit, NULL);

    int account_choose_credit = random_account_choose(accounts_number, accounts_number+1);
    account *account_for_credit = (account*)malloc(sizeof(account));
    account_for_credit = accounts[account_choose_credit];
    transaction_info *transaction_info_credit = (transaction_info*)malloc(sizeof(transaction_info));
    transaction_info_credit->destination = account_for_credit;
    transaction_info_credit->transaction_amount = transaction_amount;
    result = pthread_create(&thread_debit, NULL, credit, (void*)transaction_info_credit);
    if(result != 0)
    {
      perror("Erreur dans la création du thread créditeur :");
    }
    pthread_join(thread_credit, NULL);
    if(i == accounts_number -1)
      sem_post(&is_transactions_finish);
    /*int account_choose_transfer_source = random_account_choose(accounts_number, accounts_number+1);
    account *account_for_transfer_source = (account*)malloc(sizeof(account));
    account_for_transfer_source = accounts[account_choose_transfer_source];
    int account_choose_transfer_destination = random_account_choose(accounts_number, account_choose_transfer_source);
    account *account_for_transfer_destination = (account*)malloc(sizeof(account));
    account_for_transfer_destination = accounts[account_choose_transfer_destination];
    transaction_info *transaction_info_transfer = (transaction_info*)malloc(sizeof(transaction_info));
    transaction_info_transfer->source = account_for_transfer_source;
    transaction_info_transfer->destination = account_for_transfer_destination;
    transaction_info_transfer->transaction_amount = transaction_amount;
    result = pthread_create(&thread_transfer, NULL, transfer, (void*)transaction_info_transfer);
    if(result != 0)
    {
      perror("Erreur dans la création du thread transfert  : ");
    }
    pthread_join(thread_transfer, NULL);*/
  }
  //pthread_mutex_unlock(&mutex_main);
  //sem_wait(&is_transactions_finish);
 
  bank_balance_ = bank_balance(accounts, accounts_number);
  printf("Le capitale de la banque apres les transactions : %d \n", bank_balance_);
  //sem_destroy(&is_transactions_finish);
  
}
